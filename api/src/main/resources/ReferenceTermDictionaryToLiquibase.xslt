<?xml version="1.0" encoding="utf-8"?>
<!-- Stylesheet that processes an Excel processable XML file into the liquibase changelog XML format -->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:rd="http://ohie.org/openshr/data"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd"
                exclude-result-prefixes="rd"
>
  <xsl:output method="xml" indent="yes"/>

  <xsl:variable name="LOINC_HL7" select="'2.16.840.1.113883.6.1'"/>
  <xsl:variable name="SNOMED_HL7" select="'2.16.840.1.113883.6.96'"/>
  <xsl:variable name="HL7_MARITAL_HL7" select="'2.16.840.1.113883.5.2'"/>

  <xsl:template match="/rd:referenceTermDictionary">
    <databaseChangeLog xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">

      <xsl:comment>
        <![CDATA[
	        This change file has been automatically generated from a source file containing reference terms
	        and their mapping to OpenMRS concepts. 

	        !DO NOT EDIT THIS FILE!
	
	        This file is automatically created upon building the SHR CDA Content Handler
	        ]]>
      </xsl:comment>
      <!--<property name="now" value="now()"/>-->

      <changeSet dbms="mysql" id="0" author="justin" runInTransaction="true">
        <preConditions>
          <not>
            <tableExists tableName="tmp_vocab_import"/>
          </not>
        </preConditions>
        <sql>
          <![CDATA[create temporary table tmp_vocab_import (
            import_key varchar(100) unique not null,
            concept_uuid varchar(50)
            );
          )]]>
        </sql>
      </changeSet>
      <!-- Create source for LOINC -->
      <changeSet  dbms="mysql" id="1" author="justin" runInTransaction="true">
        <preConditions onError="HALT" onFail="MARK_RAN">
          <and>
            <tableExists tableName="concept_reference_source"/>
            <sqlCheck expectedResult="0">
              select count(name) from concept_reference_source where name='LOINC'
            </sqlCheck>
          </and>
        </preConditions>
        <insert tableName="concept_reference_source">
          <column name="name" value="LOINC"/>
          <column name="description" value="LOINC Codes"/>
          <column name="creator" valueNumeric="1"/>
          <column name="date_created" valueComputed="now()"/>
          <column name="uuid" valueComputed="uuid()"/>
          <column name="retired" valueNumeric="0"/>
          <column name="hl7_code" value="{$LOINC_HL7}"/>
        </insert>
      </changeSet>

      <!-- Create source for SNOMED -->
      <changeSet  dbms="mysql" id="2" author="justin" runInTransaction="true">
        <preConditions onError="HALT" onFail="MARK_RAN">
          <and>
            <tableExists tableName="concept_reference_source"/>
            <sqlCheck expectedResult="0">
              select count(name) from concept_reference_source where name='SNOMED CT'
            </sqlCheck>
          </and>
        </preConditions>
        <insert tableName="concept_reference_source">
          <column name="name" value="SNOMED CT"/>
          <column name="description" value="SNOMED Codes"/>
          <column name="creator" valueNumeric="1"/>
          <column name="date_created" valueComputed="now()"/>
          <column name="uuid" valueComputed="uuid()"/>
          <column name="retired" valueNumeric="0"/>
          <column name="hl7_code" value="{$SNOMED_HL7}"/>
        </insert>
      </changeSet>

      <!-- Create source for MARITAL STATUS -->
      <changeSet  dbms="mysql" id="3" author="justin" runInTransaction="true">
        <preConditions onError="HALT" onFail="MARK_RAN">
          <and>
            <tableExists tableName="concept_reference_source"/>
            <sqlCheck expectedResult="0">
              select count(name) from concept_reference_source where name='HL7 Marital status'
            </sqlCheck>
          </and>
        </preConditions>
        <insert tableName="concept_reference_source">
          <column name="name" value="HL7 Marital status"/>
          <column name="description" value="HL7 Marital Status Codes"/>
          <column name="creator" valueNumeric="1"/>
          <column name="date_created" valueComputed="now()"/>
          <column name="uuid" valueComputed="uuid()"/>
          <column name="retired" valueNumeric="0"/>
          <column name="hl7_code" value="{$HL7_MARITAL_HL7}"/>
        </insert>
      </changeSet>

      
      <xsl:apply-templates />

      <!-- Cleanup temp table -->
      <changeSet id="99999" author="justin">
        <preConditions>
          <tableExists tableName="tmp_vocab_import"/>
        </preConditions>
        <dropTable tableName="tmp_vocab_import"/>
      </changeSet>
    </databaseChangeLog>

  </xsl:template>

  <!-- Match reference term -->
  <xsl:template match="rd:referenceTerm">
    <!-- Create reference term if not exists -->
    <xsl:variable name="taskId" select="rd:id * 10"/>
    <changeSet  dbms="mysql" id="{$taskId}" author="justin">
      <preConditions onError="HALT" onFail="MARK_RAN">
        <and>
          <tableExists tableName="concept_reference_term"/>
          <sqlCheck expectedResult="0">
            select count(code) from concept_reference_term inner join concept_reference_source on (concept_reference_term.concept_source_id = concept_reference_source.concept_source_id) where
            code = '<xsl:value-of select="rd:code"/>' and concept_reference_source.name = '<xsl:value-of select="rd:codeSystemName"/>';
          </sqlCheck>
        </and>
      </preConditions>
      <comment>
        Adding <xsl:value-of select="rd:code"/> to reference terms
      </comment>
      <insert tableName="concept_reference_term">
        <column name="concept_reference_term_id" autoIncrement="true"/>
        <column name="concept_source_id" valueComputed="(select concept_source_id from concept_reference_source where name = '{rd:codeSystemName}')"/>
        <column name="name" value="{rd:description}"/>
        <column name="code" value="{rd:code}"/>
        <column name="description" value="{rd:description}"/>
        <column name="uuid" valueComputed="uuid()"/>
        <column name="creator" valueNumeric="1"/>
        <column name="date_created" valueComputed="now()"/>
      </insert>
    </changeSet>

    <!-- create name variable -->
    <xsl:variable name="conceptName">
      <xsl:choose>
        <xsl:when test="rd:mapping/rd:concept/rd:name/text()">
          <xsl:value-of select="rd:mapping/rd:concept/rd:name/text()"/>
        </xsl:when>
        <xsl:when test="rd:conceptType = 'Numeric' and rd:units/text()">
          <xsl:value-of select="concat(rd:description, ' (', rd:units, ')')"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="rd:description"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="id" select="rd:id"/>
    <xsl:variable name="isSet" select="//rd:setOf[contains(text(),$id)]"/>

    <!-- Create concept if not exists or not specified -->
    <xsl:choose>
      <xsl:when test="not(rd:mapping/rd:concept/rd:name/text())">
        <changeSet  dbms="mysql" author="justin" id="{$taskId + 1}">
          <preConditions onError="HALT" onFail="MARK_RAN">
            <and>
              <tableExists tableName="concept_name"/>
              <tableExists tableName="concept"/>
              <!-- Create a concept -->
              <sqlCheck expectedResult="0">
                select count(concept_id) from concept_name where name='<xsl:value-of select="$conceptName"/>' and locale='en'
              </sqlCheck>
              <sqlCheck expectedResult="1">
                select count(concept_datatype_id) from concept_datatype where name='<xsl:value-of select="rd:conceptType"/>'
              </sqlCheck>
            </and>
          </preConditions>
          <comment>
            Adding <xsl:value-of select="$conceptName"/> to concepts and adding mapping to reference term
          </comment>
          <insert tableName="tmp_vocab_import">
            <column name="import_key" value="{rd:id}"/>
            <column name="concept_uuid" valueComputed="uuid()"/>
          </insert>
          <insert tableName="concept">
            <column name="concept_id" autoIncrement="true"/>
            <column name="short_name" value="{rd:code}"/>
            <column name="description" value="{$conceptName}"/>
            <column name="uuid" valueComputed="(select concept_uuid from tmp_vocab_import where import_key = '{rd:id}')"/>
            <column name="datatype_id" valueComputed="(select concept_datatype_id from concept_datatype where name='{rd:conceptType}')"/>
            <xsl:choose>
              <!-- SET -->
              <xsl:when test="$isSet">
                <column name="class_id" valueComputed="(select concept_class_id from concept_class where name='ConvSet')"/>
              </xsl:when>
              <xsl:when test="rd:classification/text()">
                <column name="class_id" valueComputed="(select concept_class_id from concept_class where name='{rd:classification}')"/>
              </xsl:when>
              <xsl:otherwise>
                <column name="class_id" valueComputed="(select concept_class_id from concept_class where name='Misc')"/>
              </xsl:otherwise>
            </xsl:choose>
            <column name="is_set" valueBoolean="{count($isSet) > 0}"/>
            <column name="creator" valueNumeric="1"/>
            <column name="date_created" valueComputed="now()"/>
          </insert>
          <insert tableName="concept_name">
            <column name="concept_id" valueComputed="(select concept_id from concept inner join tmp_vocab_import on (concept.uuid = tmp_vocab_import.uuid) where import_key = '{rd:id}' )"/>
            <column name="name" value="{$conceptName}"/>
            <column name="locale" value="en"/>
            <column name="creator" valueNumeric="1"/>
            <column name="date_created" valueComputed="now()"/>
            <column name="uuid" valueComputed="uuid()"/>
            <column name="concept_name_id" autoIncrement="true"/>
            <column name="concept_name_type" value="FULLY_SPECIFIED"/>
            <column name="locale_preferred" valueBoolean="1"/>
          </insert>
          <xsl:choose>
            <xsl:when test="rd:conceptType = 'Numeric'">
              <insert tableName="concept_numeric">
                <column name="concept_id" valueComputed="(select concept_id from concept inner join tmp_vocab_import on (concept.uuid = tmp_vocab_import.uuid) where import_key = '{rd:id}' )"/>
                <column name="units" value="{rd:units}"/>
              </insert>
            </xsl:when>
            <xsl:when test="rd:conceptType = 'Complex'">
              <insert tableName="concept_complex">
                <column name="concept_id" valueComputed="(select concept_id from concept inner join tmp_vocab_import on (concept.uuid = tmp_vocab_import.uuid) where import_key = '{rd:id}' )"/>
                <column name="handler" value="BinaryDataHandler"/>
              </insert>
            </xsl:when>
            <xsl:when test="rd:conceptType = 'Coded' and rd:units/text()">
              <xsl:variable name="questionConcept" select="."/>
              <xsl:variable name="answerConcepts" select="//rd:referenceTerm[contains($questionConcept/rd:units, rd:id)]"/>
              
              <xsl:for-each select="$answerConcepts">
                <!-- Look for answers -->
                <insert tableName="concept_answer">
                  <column name="answer_concept" valueComputed="(select concept_id from concept inner join tmp_vocab_import on (concept.uuid = tmp_vocab_import.uuid) where import_key = '{rd:id}' )"/>
                  <column name="uuid" valueComputed="uuid()"/>
                  <column name="creator" valueNumeric="1"/>
                  <column name="date_created" valueComputed="now()"/>
                  <column name="concept_id" valueComputed="(select concept_id from concept inner join tmp_vocab_import on (concept.uuid = tmp_vocab_import.uuid) where import_key = '{$questionConcept/rd:id}' )"/>
                </insert>
              </xsl:for-each>
              
            </xsl:when>
          </xsl:choose>

        </changeSet>
        <xsl:variable name="mapType">
          <xsl:choose>
            <xsl:when test="rd:units/text() != '' and rd:conceptType = 'Numeric'">NARROWER-THAN</xsl:when>
            <xsl:otherwise>SAME-AS</xsl:otherwise>
          </xsl:choose>
        </xsl:variable>

        <!-- call map -->
        <xsl:call-template name="createMap">
          <xsl:with-param name="conceptId" select="rd:id"/>
          <xsl:with-param name="mapType" select="$mapType"/>
          <xsl:with-param name="referenceTerm" select="."/>
        </xsl:call-template>

      </xsl:when>
      <xsl:otherwise>
        <!-- Concept is mapped to existing concept -->
        <xsl:apply-templates select="rd:mapping"/>
      </xsl:otherwise>
    </xsl:choose>

    <!-- add reference term to sets -->
    <xsl:variable name="member" select="."/>
    <xsl:variable name="memberOfSets" select="//rd:referenceTerm[contains($member/rd:setOf, rd:id)]"/>

    <xsl:for-each select="$memberOfSets">
      <xsl:sort select="id"/>
      <changeSet  dbms="mysql" author="justin" id="{$taskId + position() + 1}">
        <preConditions onError="HALT" onFail="MARK_RAN">
          <and>
            <tableExists tableName="concept_name"/>
            <tableExists tableName="concept"/>
            <tableExists tableName="concept_set"/>
            <!-- Check that the concept exists -->
            <sqlCheck expectedResult="1">
              select count(uuid) from tmp_vocab_import where import_key='<xsl:value-of select="$member/rd:id"/>'
            </sqlCheck>
            <!-- Check that the set concept exists -->
            <sqlCheck expectedResult="1">
              select count(uuid) from tmp_vocab_import where import_key='<xsl:value-of select="rd:id"/>'
            </sqlCheck>
            <sqlCheck expectedResult="0">
              select count(concept_set_id) from concept_set inner join concept as memberConcept on (concept_set.concept_id = memberConcept.concept_id)
              inner join concept as setmemberConcept on (setmember.concept_id = concept_set.concept_set) 
              inner join tmp_vocab_import as memberVocab on (memberVocab.uuid = memberConcept.uuid)
              inner join tmp_vocab_import as setmemberVocab on (setmemberVocab.uuid = setmemberConcept.uuid)
              where memberVocab.uuid = '<xsl:value-of select="$member/rd:id"/>'
              and setmemberVocab.uuid = '<xsl:value-of select="rd:id"/>' 
            </sqlCheck>
          </and>
        </preConditions>
        <comment>
          Adding <xsl:value-of select="$conceptName"/> to set <xsl:value-of select="rd:description"/>
        </comment>
        <insert tableName="concept_set">
          <column name="concept_set_id" autoIncrement="true"/>
          <column name="concept_id" valueComputed="(select concept_id from concept inner join tmp_vocab_import where import_key = '{$member/rd:id}')"/>
          <column name="concept_set" valueComputed="(select concept_id from concept inner join tmp_vocab_import where import_key = '{rd:id}')"/>
          <column name="creator" valueNumeric="1"/>
          <column name="uuid" valueComputed="uuid()"/>
          <column name="date_created" valueComputed="now()"/>
        </insert>

      </changeSet>
    </xsl:for-each>

  </xsl:template>

  <xsl:template match="rd:mapping">

    <!-- There is a distinct possibility the term we're mapping to doesn't exist. This means that our freshly
    created reference term isn't able to be used -->
    <xsl:variable name="referenceTerm" select="parent::rd:referenceTerm" />
    <xsl:variable name="taskId" select="$referenceTerm/rd:id * 10" />
    <xsl:variable name="id" select="$referenceTerm/rd:id"/>
    <xsl:variable name="isSet" select="//rd:setOf[contains(text(),$id)]"/>
    <changeSet  dbms="mysql" author="justin" id="{$taskId + 1}">
      <preConditions onError="HALT" onFail="MARK_RAN">
        <and>
          <tableExists tableName="concept_name"/>
          <tableExists tableName="concept"/>
          <!-- Create a concept -->
          <sqlCheck expectedResult="0">
            select count(concept_id) from concept_name where name='<xsl:value-of select="rd:concept/rd:name"/>' and locale='en'
          </sqlCheck>
          <sqlCheck expectedResult="1">
            select count(concept_datatype_id) from concept_datatype where name='<xsl:value-of select="$referenceTerm/rd:conceptType"/>'
          </sqlCheck>
        </and>
      </preConditions>
      <comment>
        Mapped term to an invalid concept <xsl:value-of select="rd:name"/> 
      </comment>
      <insert tableName="concept">
        <column name="concept_id" autoIncrement="true"/>
        <column name="short_name" value="{$referenceTerm/rd:code}"/>
        <column name="description" value="{rd:concept/rd:name}"/>
        <column name="uuid" valueComputed="uuid()"/>
        <column name="datatype_id" valueComputed="(select concept_datatype_id from concept_datatype where name='{$referenceTerm/rd:conceptType}')"/>
        <xsl:choose>
          <!-- SET -->
          <xsl:when test="$isSet">
            <column name="class_id" valueComputed="(select concept_class_id from concept_class where name='ConvSet')"/>
          </xsl:when>
          <xsl:when test="rd:classification/text()">
            <column name="class_id" valueComputed="(select concept_class_id from concept_class where name='{$referenceTerm/rd:classification}')"/>
          </xsl:when>
          <xsl:otherwise>
            <column name="class_id" valueComputed="(select concept_class_id from concept_class where name='Misc')"/>
          </xsl:otherwise>
        </xsl:choose>
        <column name="is_set" valueBoolean="{count($isSet) > 0}"/>
        <column name="creator" valueNumeric="1"/>
        <column name="date_created" valueComputed="now()"/>
      </insert>
      <insert tableName="concept_name">
        <column name="concept_id" valueComputed="(select concept_id from concept where short_name = '{$referenceTerm/rd:code}' and description = '{rd:concept/rd:name}')"/>
        <column name="name" value="{rd:concept/rd:name}"/>
        <column name="locale" value="en"/>
        <column name="creator" valueNumeric="1"/>
        <column name="date_created" valueComputed="now()"/>
        <column name="uuid" valueComputed="uuid()"/>
        <column name="concept_name_id" autoIncrement="true"/>
        <column name="concept_name_type" value="FULLY_SPECIFIED"/>
        <column name="locale_preferred" valueBoolean="1"/>
      </insert>
      <xsl:choose>
        <xsl:when test="$referenceTerm/rd:conceptType = 'Numeric'">
          <insert tableName="concept_numeric">
            <column name="concept_id" valueComputed="(select concept_id from concept where short_name = '{$referenceTerm/rd:code}' and description = '{rd:concept/rd:name}')"/>
            <column name="units" value="{rd:units}"/>
          </insert>
        </xsl:when>
        <xsl:when test="$referenceTerm/rd:conceptType = 'Complex'">
          <insert tableName="concept_complex">
            <column name="concept_id" valueComputed="(select concept_id from concept where short_name = '{$referenceTerm/rd:code}' and description = '{rd:concept/rd:name}')"/>
            <column name="handler" value="BinaryDataHandler"/>
          </insert>
        </xsl:when>
        <xsl:when test="$referenceTerm/rd:conceptType = 'Coded' and $referenceTerm/rd:units/text()">
          <xsl:variable name="questionConcept" select="$referenceTerm"/>
          <xsl:variable name="answerConcepts" select="//rd:referenceTerm[contains($questionConcept/rd:units, rd:id)]"/>

          <xsl:for-each select="$answerConcepts">
            <!-- Look for answers -->
            <xsl:variable name="answerName">
              <xsl:choose>
                <xsl:when test="rd:mapping/rd:concept/rd:name/text()">
                  <xsl:value-of select="rd:mapping/rd:concept/rd:name/text()"/>
                </xsl:when>
                <xsl:when test="rd:conceptType = 'Numeric' and rd:units/text()">
                  <xsl:value-of select="concat(rd:description, ' (', rd:units, ')')"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="rd:description"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <insert tableName="concept_answer">
              <column name="answer_concept" valueComputed="(select concept_id from concept where short_name = '{rd:code}' and description = '{$answerName}')"/>
              <column name="uuid" valueComputed="uuid()"/>
              <column name="creator" valueNumeric="1"/>
              <column name="date_created" valueComputed="now()"/>
              <column name="concept_id" valueComputed="(select concept_id from concept where short_name = '{$questionConcept/rd:code}' and description = '{$questionConcept/rd:mapping/rd:concept/rd:name}')"/>
            </insert>
          </xsl:for-each>

        </xsl:when>
      </xsl:choose>

    </changeSet>
    
    <xsl:call-template name="createMap">
      <xsl:with-param name="conceptId" select="rd:concept/rd:ciel"/>
      <xsl:with-param name="mapType" select="rd:concept/rd:mapType"/>
      <xsl:with-param name="referenceTerm" select="$referenceTerm"/>
    </xsl:call-template>
  </xsl:template>

  <!-- Create concept mapping -->
  <xsl:template name="createMap">
    <xsl:param name="conceptId"/>
    <xsl:param name="mapType"/>
    <xsl:param name="referenceTerm"/>

    <changeSet  dbms="mysql" author="justin" id="{$referenceTerm/rd:id * 10 + 9}">
      <preConditions onError="HALT" onFail="MARK_RAN">
        <and>
          <tableExists tableName="concept_name"/>
          <tableExists tableName="concept"/>
          <tableExists tableName="concept_reference_map"/>
          <tableExists tableName="concept_reference_term"/>
          <!-- Check that the concept exists -->
          <sqlCheck expectedResult="1">
            select count(concept_id) from concept inner join tmp_vocab_import on (concept.uuid = tmp_vocab_import.uuid) where import_key='<xsl:value-of select="$conceptId"/>'
          </sqlCheck>
          <!-- check reference term exists -->
          <sqlCheck expectedResult="1">
            select count(concept_reference_term_id) from concept_reference_term inner join concept_reference_source on (concept_reference_term.concept_source_id = concept_reference_source.concept_source_id) 
              where code='<xsl:value-of select="$referenceTerm/rd:code"/>' and concept_reference_source.name = '<xsl:value-of select="$referenceTerm/rd:codeSystemName"/>'
          </sqlCheck>
        </and>
        <!-- ensure map doesn't already exist -->
        <sqlCheck expectedResult="0">
          select count(concept_map_id) from concept_reference_map inner join concept on (concept_reference_map.concept_id = concept_name.concept_id)
          inner join tmp_vocab_import on (tmp_vocab_import.uuid = concept.uuid)
          inner join concept_reference_term on (concept_reference_term.concept_reference_term_id = concept_reference_map.concept_reference_term_id)
          inner join concept_reference_source on (concept_reference_source.concept_source_id = concept_reference_term.concept_source_id)
          where concept_reference_term.code='<xsl:value-of select="$referenceTerm/rd:code"/>'
          and concept_reference_source.name = '<xsl:value-of select="$referenceTerm/rd:codeSystemName"/>'
          and tmp_vocab_import.import_key = '<xsl:value-of select="$conceptId"/>'
        </sqlCheck>
      </preConditions>
      <comment>
        Create map :
        Concept: <xsl:value-of select="$referenceTerm/rd:code"/> 
        Is: <xsl:value-of select="$mapType"/> 
        Term: <xsl:value-of select="$conceptId"/>
      </comment>
      <insert tableName="concept_reference_map">
        <column name="concept_map_id" autoIncrement="true"/>
        <column name="creator" valueNumeric="1"/>
        <column name="date_created" valueComputed="now()"/>
        <column name="uuid" valueComputed="uuid()"/>
        <column name="concept_id" valueComputed="(select concept_id from concept inner join tmp_vocab_import on (concept.uuid = tmp_vocab_import.uuid) where tmp_vocab_import.import_key = '{$conceptId}' and locale = 'en')"/>
        <column name="concept_reference_term_id" valueComputed="(select concept_reference_term_id from concept_reference_term inner join concept_reference_source on (concept_reference_source.concept_source_id = concept_reference_term.concept_source_id) where code = '{$referenceTerm/rd:code}' and concept_reference_source.name = '{$referenceTerm/rd:codeSystemName}')"/>
        <column name="concept_map_type_id" valueComputed="(select concept_map_type_id from concept_map_type where name = '{$mapType}')"/>
      </insert>
    </changeSet>
  </xsl:template>

</xsl:stylesheet>
